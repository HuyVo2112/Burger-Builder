{"version":3,"sources":["components/Burger/BuildControls/BuildControl/BuildControl.module.css","components/Burger/BuildControls/BuildControls.module.css","components/Burger/BuildControls/BuildControl/BuildControl.js","components/Burger/BuildControls/BuildControls.js","components/Burger/OrderSummary/OrderSummary.js","containers/BurgerBuilder/BurgerBuilder.js"],"names":["module","exports","BuildControl","props","className","classes","onClick","removed","Less","disabled","Label","label","added","More","controls","type","BuildControls","price","toFixed","map","object","key","ingredientAdded","ingredientRemoved","ordered","purchaseable","OrderButton","isAuthenticated","OrderSummary","ingredientSummary","Object","keys","this","ingredients","igKey","style","textTransform","Auxilary","Button","btnType","clicked","purchaseCancelled","purchaseContinued","Component","BurgerBuilder","updatePurchaseState","values","reduce","acc","currentValue","purchaseHandler","setState","prevState","prevProps","purchasing","setAuthRedirectPathHandler","history","push","purchaseCancelHandler","parseQueryParam","tempString","ingredient","totalPrice","purchaseContinueHandler","purchaseInitHandler","pathname","state","loading","getIngredientFromDatabaseHandler","burger","error","Spinner","orderSummary","Burger","addIngredientHandler","removeIngredientHandler","Modal","show","modalClosed","connect","auth","tokenId","dispatch","actionTypes","path","withErrorHandler","axios"],"mappings":"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","file":"static/js/3.d5f684d6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"BuildControl\":\"BuildControl_BuildControl__2vrrQ\",\"Label\":\"BuildControl_Label__1iKED\",\"Less\":\"BuildControl_Less__1iMoY\",\"More\":\"BuildControl_More__2rGr2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BuildControls\":\"BuildControls_BuildControls__TxtBx\",\"OrderButton\":\"BuildControls_OrderButton__IJUh4\",\"enable\":\"BuildControls_enable__1jWRM\"};","import React from \"react\";\r\nimport classes from \"./BuildControl.module.css\";\r\n\r\nconst BuildControl = (props) => {\r\n\r\n \r\n    return (\r\n        <div className={classes.BuildControl}>\r\n            <button onClick={props.removed} className={classes.Less} disabled={props.disabled}>Less</button>\r\n            <div className={classes.Label}>{props.label}</div>\r\n            <button onClick={props.added} className={classes.More}>More</button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default BuildControl;","import React from \"react\";\r\nimport BuildControl from \"./BuildControl/BuildControl\";\r\nimport classes from \"./BuildControls.module.css\";\r\n\r\nconst controls = [\r\n    { label: \"Salad\", type: \"salad\" },\r\n    { label: \"Bacon\", type: \"bacon\" },\r\n    { label: \"Cheese\", type: \"cheese\" },\r\n    { label: \"Meat\", type: \"meat\" }\r\n]\r\n\r\nconst BuildControls = (props) => {\r\n\r\n\r\n    return (\r\n        <div className={classes.BuildControls}>\r\n            <p>Current Price: <strong>{props.price.toFixed(2)}</strong></p>\r\n            {controls.map(object => <\r\n                BuildControl \r\n                    key={object.label} \r\n                    label={object.label} \r\n                    added={() => props.ingredientAdded(object.type)}\r\n                    removed={() => props.ingredientRemoved(object.type)}\r\n                    disabled={props.disabled[object.type]}\r\n                />)\r\n            }\r\n            <button \r\n                onClick={props.ordered} \r\n                disabled={!props.purchaseable} \r\n                className={classes.OrderButton}>\r\n                    {props.isAuthenticated ? \"ORDER NOW\" : \"SIGN UP TO ORDER\"}\r\n            </button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default BuildControls;","import React, { Component } from \"react\";\r\nimport Auxilary from \"../../../hoc/Auxilary/Auxilary\"\r\nimport Button from \"../../UI/Button/Button\";\r\n\r\nclass OrderSummary extends Component {\r\n\r\n\r\n    render() {\r\n        const ingredientSummary = Object.keys(this.props.ingredients)\r\n            .map(igKey => {\r\n                return (\r\n                    <li key={igKey}>\r\n                        <span style={{textTransform: \"capitalize\"}}>{igKey}</span>: {this.props.ingredients[igKey]}\r\n                    </li>\r\n            )})\r\n        return (\r\n            <Auxilary>\r\n                <h3>Your Order</h3>\r\n                <p>A delicious burger with the following ingredients: </p>\r\n                <ul>\r\n                    {ingredientSummary}\r\n                </ul>\r\n                <p><strong>Total Price: {this.props.price.toFixed(2)}</strong></p>\r\n                <p>Continue to Checkout?</p>\r\n                <Button btnType=\"Danger\" clicked={this.props.purchaseCancelled}>CANCEL</Button>\r\n                <Button btnType=\"Success\" clicked={this.props.purchaseContinued}>CONTINUE</Button>\r\n                \r\n            </Auxilary>\r\n        )\r\n\r\n    }\r\n} \r\n\r\nexport default OrderSummary;","import React, {Component} from \"react\";\r\nimport Auxilary from \"../../hoc/Auxilary/Auxilary\";\r\nimport Burger from \"../../components/Burger/Burger\";\r\nimport BuildControls from \"../../components/Burger/BuildControls/BuildControls\";\r\nimport Modal from \"../../components/UI/Modal/Modal\";\r\nimport OrderSummary from \"../../components/Burger/OrderSummary/OrderSummary\"\r\nimport axios from \"../../axios-orders\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport withErrorHandler from \"../../hoc/withErrorHandler/withErrorHandler\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actionTypes from \"../../store/actions/index\";\r\n\r\n\r\n\r\nclass BurgerBuilder extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            purchasing: false,\r\n            loading: false,\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    updatePurchaseState = (ingredients) => {\r\n        return Object.values(ingredients).reduce((acc, currentValue) => acc + currentValue) > 0;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getIngredientFromDatabaseHandler()\r\n            \r\n    }\r\n\r\n\r\n\r\n    purchaseHandler = () => {\r\n        if (this.props.isAuthenticated) {\r\n            this.setState((prevState, prevProps) => ({\r\n                purchasing: true\r\n            }))\r\n        } else {\r\n            this.props.setAuthRedirectPathHandler(\"/checkout\")\r\n            this.props.history.push(\"/auth\");\r\n        }\r\n            \r\n    }\r\n\r\n    purchaseCancelHandler = () => {\r\n        this.setState({\r\n            purchasing: false\r\n        })\r\n    }\r\n\r\n    parseQueryParam = () => {\r\n        let tempString = \"?\";\r\n\r\n        for(let ingredient in this.props.ingredients) {\r\n            tempString+=`${ingredient}=${this.props.ingredients[ingredient]}&`;\r\n        }\r\n        tempString = tempString + `totalPrice=${this.props.totalPrice}`\r\n        return tempString;\r\n    }\r\n\r\n    purchaseContinueHandler = () => {\r\n        //alert(\"You continued\");\r\n        this.props.purchaseInitHandler();\r\n        this.props.history.push({\r\n            pathname: \"/checkout\",\r\n            // search: this.parseQueryParam(),\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const disabled = {\r\n            ...this.props.ingredients,\r\n        }\r\n\r\n        for (let key in disabled) {\r\n            disabled[key] = disabled[key] <= 0;\r\n        }\r\n\r\n        let burger = this.props.error ? <p>Ingredients can't be loaded</p> : <Spinner />;\r\n        let orderSummary = null;    \r\n\r\n        if(this.props.ingredients) {\r\n            burger = \r\n            <Auxilary>\r\n                <Burger ingredients={this.props.ingredients}/>\r\n                <BuildControls \r\n                isAuthenticated={this.props.isAuthenticated}\r\n                ingredientAdded={this.props.addIngredientHandler}\r\n                ingredientRemoved={this.props.removeIngredientHandler}\r\n                disabled={disabled}\r\n                price={this.props.totalPrice}\r\n                purchaseable={this.updatePurchaseState(this.props.ingredients)}\r\n                ordered={this.purchaseHandler}\r\n                />  \r\n            </Auxilary>\r\n\r\n            orderSummary = <OrderSummary \r\n                ingredients={this.props.ingredients} \r\n                purchaseContinued={this.purchaseContinueHandler}\r\n                purchaseCancelled={this.purchaseCancelHandler}\r\n                price={this.props.totalPrice}/>\r\n            \r\n        }\r\n\r\n        if (this.state.loading) {\r\n            orderSummary = <Spinner />\r\n        }\r\n        \r\n        return (\r\n            <Auxilary>\r\n                <Modal show={this.state.purchasing} modalClosed={this.purchaseCancelHandler}>\r\n                    {orderSummary}\r\n                </Modal>\r\n                {burger}\r\n            </Auxilary>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        totalPrice: state.burger.totalPrice,\r\n        ingredients: state.burger.ingredients,\r\n        error: state.burger.error,\r\n        isAuthenticated: state.auth.tokenId !== null,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addIngredientHandler: (ingredient) => dispatch(actionTypes.addIngredient({ingredient: ingredient})),\r\n        removeIngredientHandler: (ingredient) => dispatch(actionTypes.removeIngredient({ingredient: ingredient})),\r\n        getIngredientFromDatabaseHandler: () => dispatch(actionTypes.initIngredients()),\r\n        purchaseInitHandler: () => dispatch(actionTypes.purchaseInit()),\r\n        setAuthRedirectPathHandler: (path) => dispatch(actionTypes.setAuthRedirectPath(path))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(BurgerBuilder, axios));"],"sourceRoot":""}